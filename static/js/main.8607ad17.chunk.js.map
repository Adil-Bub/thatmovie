{"version":3,"sources":["SearchMovies.js","App.js","serviceWorker.js","index.js"],"names":["SearchMovies","useState","query","setQuery","movies","setMovies","seacrMovies","event","a","preventDefault","url","fetch","res","json","data","console","log","results","className","onSubmit","htmlFor","type","name","placeholder","value","autoComplete","onChange","e","target","filter","movie","poster_path","map","key","id","src","alt","title","release_date","vote_average","overview","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qMA8DeA,MA5Df,WAAyB,IAAD,EACIC,mBAAS,IADb,mBACfC,EADe,KACRC,EADQ,OAEMF,mBAAS,IAFf,mBAEfG,EAFe,KAEPC,EAFO,KAGhBC,EAAW,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DAClBD,EAAME,iBACAC,EAFY,kHAEqGR,EAFrG,iDAIES,MAAMD,GAJR,cAIVE,EAJU,gBAKGA,EAAIC,OALP,OAKVC,EALU,OAMhBC,QAAQC,IAAIF,EAAKG,SACjBZ,EAAUS,EAAKG,SAPC,kDAShBF,QAAQC,IAAR,MATgB,0DAAH,sDAYjB,OACE,oCACE,0BAAME,UAAU,OAAOC,SAAUb,GAC/B,2BAAOc,QAAQ,QAAQF,UAAU,SAAjC,cAGA,2BACEG,KAAK,OACLC,KAAK,QACLC,YAAY,eACZC,MAAOtB,EACPuB,aAAa,MACbP,UAAU,SACVQ,SAAU,SAACC,GAAD,OAAOxB,EAASwB,EAAEC,OAAOJ,UAErC,2CAEF,6BACGpB,EACEyB,QAAO,SAACC,GAAD,OAAWA,EAAMC,eACxBC,KAAI,SAACF,GAAD,OACH,yBAAKZ,UAAU,OAAOe,IAAKH,EAAMI,IAC/B,yBACEhB,UAAU,SACViB,IAAG,0DAAqDL,EAAMC,aAC9DK,IAAKN,EAAMO,MAAQ,WAErB,yBAAKnB,UAAU,WACb,wBAAIA,UAAU,SAASY,EAAMO,OAC7B,2BACE,iDACCP,EAAMQ,aACP,6BACA,2CACCR,EAAMS,cAET,uBAAGrB,UAAU,QAAQY,EAAMU,kBCzC5BC,MATf,WACE,OACE,yBAAKvB,UAAU,OACb,yDACA,kBAAC,EAAD,QCKcwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,a","file":"static/js/main.8607ad17.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nfunction SearchMovies() {\n  const [query, setQuery] = useState(\"\");\n  const [movies, setMovies] = useState([]);\n  const seacrMovies = async (event) => {\n    event.preventDefault();\n    const url = `https://api.themoviedb.org/3/search/movie?api_key=bb7ba1c5767492a8548f3807d9db91ad&language=en-US&query=${query}&page=1&include_adult=false`;\n    try {\n      const res = await fetch(url);\n      const data = await res.json();\n      console.log(data.results);\n      setMovies(data.results);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return (\n    <>\n      <form className=\"form\" onSubmit={seacrMovies}>\n        <label htmlFor=\"query\" className=\"label\">\n          Movie Name\n        </label>\n        <input\n          type=\"text\"\n          name=\"query\"\n          placeholder=\"Forrest Gump\"\n          value={query}\n          autoComplete=\"off\"\n          className=\"search\"\n          onChange={(e) => setQuery(e.target.value)}\n        />\n        <button>Search</button>\n      </form>\n      <div>\n        {movies\n          .filter((movie) => movie.poster_path)\n          .map((movie) => (\n            <div className=\"card\" key={movie.id}>\n              <img\n                className=\"poster\"\n                src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${movie.poster_path}`}\n                alt={movie.title + \"poster\"}\n              />\n              <div className=\"content\">\n                <h3 className=\"title\">{movie.title}</h3>\n                <p>\n                  <small>RELEASE DATE: </small>\n                  {movie.release_date}\n                  <br />\n                  <small>RATING: </small>\n                  {movie.vote_average}\n                </p>\n                <p className=\"desc\">{movie.overview}</p>\n              </div>\n            </div>\n          ))}\n      </div>\n    </>\n  );\n}\n\nexport default SearchMovies;\n","import React from \"react\";\nimport SearchMovies from \"./SearchMovies\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h2>Search for your favourite</h2>\n      <SearchMovies />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}